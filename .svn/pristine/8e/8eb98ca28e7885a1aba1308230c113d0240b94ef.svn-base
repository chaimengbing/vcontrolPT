package com.vcontrol.vcontroliot.util;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Arrays;

import android.text.TextUtils;

import com.vcontrol.vcontroliot.log.Log;

public class SocketUtil
{

    private static final String TAG = SocketUtil.class.getSimpleName();
    private static Socket socket = null;

    private static DataOutputStream runTimeDos;
    private static DataOutputStream dos;
    private static BufferedReader reader;
    private static DataInputStream dis;
    private static FileOutputStream imgFos;

    private static long beforeTime = 0;

    private static void init(final String ip, final int port)
    {

        new Thread(new Runnable()
        {

            @Override
            public void run()
            {
                try
                {
                    Log.info(TAG, "init::ip:" + ip + ",port:" + port);
                    socket = new Socket(ip, port);
                    // 设置超时
                    socket.setSoTimeout(1500);

                    EventNotifyHelper.getInstance().postUiNotification(UiEventEntry.CONNCT_OK);
                } catch (Exception e)
                {
                    EventNotifyHelper.getInstance().postUiNotification(UiEventEntry.CONNCT_FAIL);
                    Log.exception(TAG, e);
                }
            }
        }).start();
    }

    /**
     * 获得socket实例，建立连接
     *
     * @param ip
     * @param port
     * @return
     */
    public static Socket connectServer(String ip, int port)
    {
        closeSocket();
        if (socket == null)
        {
            init(ip, port);
        }
        return socket;
    }

    public static boolean isConnect()
    {
        if (socket != null)
        {
            return socket.isConnected() && !socket.isClosed();
        }
        return false;
    }

    /**
     * 发送数据
     *
     * @param content
     */
    public static void sendData(final String content)
    {
        if (TextUtils.isEmpty(content))
        {
            return;
        }

        if (System.currentTimeMillis() - beforeTime < 500)
        {
            return;
        }
        beforeTime = System.currentTimeMillis();

        Log.info(TAG, "sendData::content:" + content);
        ServiceUtils.getSocketThreads().execute(new Runnable()
        {
            @Override
            public void run()
            {
                if (socket != null)
                {
                    try
                    {
                        dos = new DataOutputStream(socket.getOutputStream());
                        dos.writeUTF(content + "\r\n");
//                        dos.writeBytes(content + "\r\n");
                        dos.flush();

                        readData(content);
                    } catch (Exception e)
                    {
                        ToastUtil.showToastLong("数据发送失败！");
                        ProgressBarUtil.dismissProgressDialog();
                        EventNotifyHelper.getInstance().postUiNotification(UiEventEntry.CONNCT_AGAIN);
                        Log.exception(TAG, e);
                    } finally
                    {
                    }

                }
                else
                {
                    EventNotifyHelper.getInstance().postUiNotification(UiEventEntry.CONNCT_AGAIN);
                    ToastUtil.showToastLong("设备未连接！！");
                }
            }
        });

    }

    /**
     * 发送实时数据的方法
     *
     * @param content
     */
    public static void sendRunTimeData(final String content)
    {
        if (TextUtils.isEmpty(content))
        {
            return;
        }

        ServiceUtils.getSocketThreads().execute(new Runnable()
        {
            @Override
            public void run()
            {
                Log.info(TAG, "sendRunTimeData::content:" + content);
                if (socket != null)
                {
                    try
                    {
                        runTimeDos = new DataOutputStream(socket.getOutputStream());
                        runTimeDos.writeUTF(content + "\r\n");
                        runTimeDos.flush();
                    } catch (Exception e)
                    {
                        ToastUtil.showToastLong("数据发送失败！");
                        EventNotifyHelper.getInstance().postUiNotification(UiEventEntry.CONNCT_AGAIN);
                        isReadImage = false;
                        ProgressBarUtil.dismissProgressDialog();
                        Log.exception(TAG, e);
                    }
                }
                else
                {
                    isReadImage = false;
                    EventNotifyHelper.getInstance().postUiNotification(UiEventEntry.CONNCT_AGAIN);
                    ProgressBarUtil.dismissProgressDialog();
                    ToastUtil.showToastLong("设备未连接！！");
                }
            }
        });
    }

    private static boolean isReadImage = true;
    /**
     * 功能：分包获取图片
     */
    private static Runnable runTimeRunnable = new Runnable()
    {

        @Override
        public void run()
        {

            isReadImage = true;
            Log.info(TAG, "runTimeRunnable::isReadImage:" + isReadImage);

            int temp = 0;
            String tempCurrent = "";
            // 上一包
            String before = "000";
            // 当前包数
            String current = "000";
            // 总包数
            String length = "";

            // RTU传过来的图片每包是 1047个字节
            byte[] buffer = new byte[1047];


            byte[] imageInfoBuffer = new byte[20];
            byte[] imageBuffer = new byte[1024];
            int next = 0;

            File file = new File(ConfigParams.ImagePath + ConfigParams.ImageName);
            try
            {
                if (!file.exists())
                {
                    // 图片文件不存在 创建文件
                    file.createNewFile();
                }
                imgFos = new FileOutputStream(file);
            } catch (Exception e)
            {
                Log.debug(TAG, "file is empty!");
                Log.exception(TAG, e);
                return;
            }
            while (isReadImage)
            {
                if (socket != null)
                {
                    if (!socket.isClosed())
                    {

                        try
                        {
                            InputStream is = socket.getInputStream();
                            dis = new DataInputStream(is);

                            while ((next = dis.read(buffer)) > 0)
                            {
                                temp = 0;
                                // 跳过前19个字节
                                System.arraycopy(buffer, 20, imageBuffer, 0, 1024);
                                // 获取图片包信息
                                System.arraycopy(buffer, 0, imageInfoBuffer, 0, 20);
//                                Log.info(TAG, Arrays.toString(imageBuffer));
                                // crc校验
                                imgFos.write(imageBuffer, 0, imageBuffer.length);
                                imgFos.flush();

                                byte[] lengthByte = new byte[10];
                                for (int i = 0; i < 7; i++)
                                {
                                    lengthByte[i] = imageInfoBuffer[i + 13];
                                }
                                String lengthS = new String(lengthByte);

                                current = lengthS.substring(0, 3);
                                length = lengthS.substring(4, 7);

                                Log.info(TAG, "currentLength:" + current);
                                Log.info(TAG, "length:" + length);

                                if (ServiceUtils.isGarbledCode(current))
                                {// 如果当前包有乱码，再次获取上一包数据
                                    SocketUtil.sendRunTimeData(ConfigParams.ReadImage + before);
                                }
                                else
                                {
                                    before = current;
                                }

                                // 总包数等于当前包数
                                if (!TextUtils.isEmpty(current) && !TextUtils.isEmpty(length) && current.equals(length))
                                {
                                    EventNotifyHelper.getInstance().postUiNotification(UiEventEntry.READ_IMAGE_SUCCESS);
                                    stopReadRunTimeData();
                                    return;
                                }

                                // 取完一包，在去获取下一包
                                if (!ServiceUtils.isGarbledCode(current))
                                {
                                    SocketUtil.sendRunTimeData(ConfigParams.ReadImage + current);
                                }

                            }
                        } catch (Exception e)
                        {
//                            if (!TextUtils.isEmpty(tempCurrent) && !current.equals(tempCurrent))
//                            {
//                                temp = 0;
//                            }
//                            tempCurrent = current;
                            temp++;
                            if (temp < 3)
                            {
                                // 取完一包，在去获取下一包
                                if (!ServiceUtils.isGarbledCode(current))
                                {
                                    SocketUtil.sendRunTimeData(ConfigParams.ReadImage + current);

                                }
                            }
                            else
                            {
                                isReadImage = false;
                                ProgressBarUtil.dismissProgressDialog();
                                ToastUtil.showToastLong("图片获取失败！");
                                temp = 0;
                            }
                            e.printStackTrace();
                        }
                    }
                    else
                    {
                        isReadImage = false;
                        ProgressBarUtil.dismissProgressDialog();
                        ToastUtil.showToastLong("图片获取失败！");
                    }
                }

            }
        }
    };

    public static void startReadRunTimeData()
    {
        Log.info(TAG, "startReadRunTimeData::");
        File file = new File(ConfigParams.ImagePath + ConfigParams.ImageName);
        if (file.exists())
        {//获取图片之前，如果有图片就先删除
            file.delete();
        }
        ServiceUtils.getSocketThreads().execute(runTimeRunnable);
    }

    public static void stopReadRunTimeData()
    {
        Log.info(TAG, "stopReadRunTimeData::");
        isReadImage = false;
        ProgressBarUtil.dismissProgressDialog();
    }

    private static void readData(final String senData)
    {
//        Log.info(TAG, "readData::senData:" + senData);
        try
        {
            if (socket != null)
            {
                try
                {
                    Log.info(TAG, "readData::run:");
//                    DataInputStream disread = new DataInputStream(socket.getInputStream());
                    reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                    String result = "";
//                    Log.info(TAG, "readData::reader:" + reader.readLine());
//                    Log.info(TAG, "readData::disread:" + disread.readUTF())、;
                    while ((result = reader.readLine()) != null)
                    {
                        if (senData.contains(ConfigParams.ReadImage))
                        {// 如果请求的是图片回放，摄像头状态，通信状态不做处理
                        }
                        else
                        {
                            Log.info(TAG, "result:" + result);
                            if (ServiceUtils.isGarbledCode(result))
                            {
                                return;
                            }
                            if (ConfigParams.SetBatteryHigh.equals(senData) || ConfigParams.SetBatteryLow.equals(senData) || ConfigParams.ReadBatteryHighStatus.equals(senData) || ConfigParams.ReadBatteryLowStatus.equals(senData))
                            {//AD电压采集单独处理
                                EventNotifyHelper.getInstance().postUiNotification(UiEventEntry.READ_AD_LV, result);
                            }
                            else
                            {
                                if (result != null && result.contains("OK"))
                                {
                                    EventNotifyHelper.getInstance().postUiNotification(UiEventEntry.READ_RESULT_OK, result, senData);
                                }
                                else
                                {
                                    EventNotifyHelper.getInstance().postUiNotification(UiEventEntry.READ_DATA, result, senData);
                                }
                            }
                        }
                    }

                    Log.info(TAG, "finish::");
                } catch (Exception e)
                {
                    Log.exception(TAG, e);
                }
            }
            else
            {
                ToastUtil.showToastLong("设备未连接！！");
            }
        } catch (Exception e)
        {
            Log.exception(TAG, e);
        }
    }

    /**
     * 关闭Socket连接
     */
    public static void closeSocket()
    {
        Log.info(TAG, "closeSocket::");
        try
        {
            if (reader != null)
            {
                reader.close();
            }
            if (dis != null)
            {
                dis.close();
            }
            if (runTimeDos != null)
            {
                runTimeDos.close();
            }
            if (dos != null)
            {
                dos.close();
            }
            if (imgFos != null)
            {
                imgFos.close();
            }
            if (socket != null)
            {
                socket.close();
                socket = null;
            }

        } catch (Exception e)
        {
            Log.exception(TAG, e);
        }

    }
}
