package com.vcontrol.vcontroliot.fragment;

import android.text.TextUtils;
import android.view.View;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RadioGroup;
import android.widget.Spinner;

import com.vcontrol.vcontroliot.R;
import com.vcontrol.vcontroliot.adapter.SimpleSpinnerAdapter;
import com.vcontrol.vcontroliot.log.Log;
import com.vcontrol.vcontroliot.util.ConfigParams;
import com.vcontrol.vcontroliot.util.EventNotifyHelper;
import com.vcontrol.vcontroliot.util.ServiceUtils;
import com.vcontrol.vcontroliot.util.SocketUtil;
import com.vcontrol.vcontroliot.util.ToastUtil;
import com.vcontrol.vcontroliot.util.UiEventEntry;

/**
 * Created by Vcontrol on 2016/11/23.
 */

public class FlowFragment extends BaseFragment implements View.OnClickListener, EventNotifyHelper.NotificationCenterDelegate {
    private Spinner flowSpinner;
    private String[] flowItems;
    private SimpleSpinnerAdapter waterAdapter;
    private  static final String TAG = FlowFragment.class.getSimpleName();

    private RadioGroup flowTypeGroup;
    private EditText speedEdittext;
    private EditText valueEdittext;
    private Button speedButton;
    private Button valueButton;

    @Override
    public int getLayoutView() {
        return R.layout.fragment_sensor_flow;
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        EventNotifyHelper.getInstance().removeObserver(this, UiEventEntry.READ_DATA);
    }

    @Override
    public void initComponentViews(View view) {
        EventNotifyHelper.getInstance().addObserver(this, UiEventEntry.READ_DATA);
        flowSpinner = (Spinner) view.findViewById(R.id.flow_485_spinner);
        flowTypeGroup = (RadioGroup) view.findViewById(R.id.flow_type);
        speedEdittext = (EditText) view.findViewById(R.id.flow_speed_add_value);
        valueEdittext = (EditText) view.findViewById(R.id.flow_add_value);
        speedButton = (Button) view.findViewById(R.id.flow_speed_add_value_button);
        valueButton = (Button) view.findViewById(R.id.flow_add_value_button);


        initView(view);
    }

    private void initView(final View view) {


        flowTypeGroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {

            @Override
            public void onCheckedChanged(RadioGroup group, int checkedId) {
                View checkView = view.findViewById(checkedId);
                if (!checkView.isPressed()) {
                    return;
                }
                String content = "";
                if (checkedId == R.id.flow_type_button) {
                    content = ConfigParams.SetFlowType + "1";
                } else if (checkedId == R.id.flow_type_button2) {
                    content = ConfigParams.SetFlowType + "2";
                }
                SocketUtil.sendData(content);
            }
        });
    }

    @Override
    public void initData() {
        flowItems = getResources().getStringArray(R.array.flow_485);
        waterAdapter = new SimpleSpinnerAdapter(getActivity(), R.layout.simple_spinner_item, flowItems);
        flowSpinner.setAdapter(waterAdapter);

        SocketUtil.sendData(ConfigParams.ReadSensorPara2);

//        flowSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
//
//            @Override
//            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
//                waterAdapter.setSelectedItem(position);
//                String content = ConfigParams.SetFlow485Type + ServiceUtils.getStr(position + 1 + "", 2);
//                SocketUtil.sendData(content);
//            }
//
//            @Override
//            public void onNothingSelected(AdapterView<?> parent) {
//
//            }
//        });
    }

    @Override
    public void setListener() {
        speedButton.setOnClickListener(this);
        valueButton.setOnClickListener(this);
    }

    @Override
    public void onClick(View view) {
        String flow = "";
        String content = "";
        double temp;
        String tt = "";
        switch (view.getId()) {
            case R.id.flow_speed_add_value_button:
                flow = speedEdittext.getText().toString().trim();

                if (TextUtils.isEmpty(flow))
                {
                    ToastUtil.showToastLong("流速加报阈值不能为空！");
                    return;
                }
                temp = Double.parseDouble(flow);
                if (temp > 99.99)
                {
                    ToastUtil.showToastLong("流速加报阈值超出范围！");
                    return;
                }
                tt = String.valueOf(temp * 1000);

                flow = tt.substring(0, tt.indexOf("."));
                content = ConfigParams.Setliusujiabao + ServiceUtils.getStr(flow + "", 5);


                break;
            case R.id.flow_add_value_button:
                flow = valueEdittext.getText().toString().trim();

                if (TextUtils.isEmpty(flow))
                {
                    ToastUtil.showToastLong("流量加报阈值不能为空！");
                    return;
                }
                temp = Double.parseDouble(flow);
                if (temp > 9.99)
                {
                    ToastUtil.showToastLong("流量加报阈值超出范围！");
                    return;
                }
                tt = String.valueOf(temp * 1000);

                flow = tt.substring(0, tt.indexOf("."));
                content = ConfigParams.Setliuliangjiabao + ServiceUtils.getStr(flow + "", 6);

                break;

            default:
                break;

        }
        SocketUtil.sendData(content);
    }

    @Override
    public void didReceivedNotification(int id, Object... args) {
        String result = (String) args[0];
        String content = (String) args[1];
        if (TextUtils.isEmpty(result) || TextUtils.isEmpty(content)) {
            return;
        }
        setData(result);
    }

    private void setData(String result)
    {
        String data = "";
        String temp = "";
        if (result.contains(ConfigParams.SetFlow485Type))
        {
            data = result.replaceAll(ConfigParams.SetFlow485Type, "").trim();
            Log.info(TAG,"data:" + data);
            if (ServiceUtils.isNumeric(data))
            {
                int i = Integer.parseInt(data);
                flowSpinner.setSelection(i - 1,false);

                flowSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {

                    @Override
                    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                        waterAdapter.setSelectedItem(position);
                        String content = ConfigParams.SetFlow485Type + ServiceUtils.getStr(position + 1 + "", 2);
                        SocketUtil.sendData(content);
                    }

                    @Override
                    public void onNothingSelected(AdapterView<?> parent) {

                    }
                });
            }
        }
        else if (result.contains(ConfigParams.SetFlowType))
        {
            data = result.replaceAll(ConfigParams.SetFlowType, "").trim();
            if ("1".equals(data))
            {
                flowTypeGroup.check(R.id.flow_type_button);
            }
            else if ("2".equals(data))
            {
                flowTypeGroup.check(R.id.flow_type_button2);
            }
        }
        else if (result.contains(ConfigParams.Setliusujiabao))
        {
            data = result.replaceAll(ConfigParams.Setliusujiabao, "").trim();
            if (ServiceUtils.isNumeric(data))
            {
                double level = Double.parseDouble(data) / 1000.0;
                temp = String.valueOf(level);
                speedEdittext.setText(temp);
            }
        }
        else if (result.contains(ConfigParams.Setliuliangjiabao))
        {
            data = result.replaceAll(ConfigParams.Setliuliangjiabao, "").trim();
            if (ServiceUtils.isNumeric(data))
            {
                double level = Double.parseDouble(data) / 1000.0;
                temp = String.valueOf(level);
                valueEdittext.setText(temp);
            }
        }
    }
}
