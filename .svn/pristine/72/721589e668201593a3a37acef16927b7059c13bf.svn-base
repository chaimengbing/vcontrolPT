package com.vcontrol.vcontroliot.fragment;

import android.nfc.FormatException;
import android.provider.Settings;
import android.text.TextUtils;
import android.view.DragAndDropPermissions;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;

import com.vcontrol.vcontroliot.R;
import com.vcontrol.vcontroliot.log.Log;
import com.vcontrol.vcontroliot.util.ConfigParams;
import com.vcontrol.vcontroliot.util.EventNotifyHelper;
import com.vcontrol.vcontroliot.util.ServiceUtils;
import com.vcontrol.vcontroliot.util.SocketUtil;
import com.vcontrol.vcontroliot.util.ToastUtil;
import com.vcontrol.vcontroliot.util.UiEventEntry;

import java.io.Console;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by Vcontrol on 2016/11/23.
 */

public class LruSysPamarsFragment extends BaseFragment implements View.OnClickListener, EventNotifyHelper.NotificationCenterDelegate
{

    private static final String TAG = LruSysPamarsFragment.class.getSimpleName();

    private byte[] head = new byte[20];

    private EditText macAdd;
    private EditText standBy;
    private EditText overTime;
    private EditText idLogic;
    private EditText tranAdd;
    private EditText physicsChannel;
    private EditText airSpeed;

    private Button macAddButton;
    private Button standByButton;
    private Button overTimeButton;
    private Button idLogicButton;
    private Button tranAddButton;
    private Button physicsChannelButton;
    private Button airSpeedButton;
    private Button initLru;


    @Override
    public int getLayoutView()
    {
        return R.layout.fragment_setting_lru_system;
    }

    @Override
    public void onDestroy()
    {
        super.onDestroy();
        EventNotifyHelper.getInstance().removeObserver(this, UiEventEntry.READ_DATA);
    }

    @Override
    public void initComponentViews(View view)
    {

        EventNotifyHelper.getInstance().addObserver(this, UiEventEntry.READ_DATA);

        macAdd = (EditText) view.findViewById(R.id.mac_add);
        standBy = (EditText) view.findViewById(R.id.standby_time);
        overTime = (EditText) view.findViewById(R.id.over_time);
        idLogic = (EditText) view.findViewById(R.id.id_logic);
        tranAdd = (EditText) view.findViewById(R.id.tran_add);
        physicsChannel = (EditText) view.findViewById(R.id.physics_channel);
        airSpeed = (EditText) view.findViewById(R.id.air_speed);

        macAddButton = (Button) view.findViewById(R.id.mac_add_setting_button);
        standByButton = (Button) view.findViewById(R.id.standby_time_setting_button);
        overTimeButton = (Button) view.findViewById(R.id.over_time_setting_button);
        idLogicButton = (Button) view.findViewById(R.id.id_logic_setting_button);
        tranAddButton = (Button) view.findViewById(R.id.tran_add_setting_button);
        physicsChannelButton = (Button) view.findViewById(R.id.physics_channel_setting_button);
        airSpeedButton = (Button) view.findViewById(R.id.air_speed_setting_button);

        initLru = (Button) view.findViewById(R.id.init_lru);
        initView(view);


        initHead();


    }

    private void initHead()
    {
//        public static final String LRU_HEAD = "A5013412ffff00";
//        //设置物理地址0x55，	数据域4个字节，低字节在先
//        public static final String LRU_MAC_ADD = "554";
        head[0] = (byte) 0xA5;
        head[1] = (byte) 0x01;
        head[2] = (byte) 0x34;
        head[3] = (byte) 0x12;
        head[4] = (byte) 0xff;
        head[5] = (byte) 0xff;
        head[6] = (byte) 0x00;
    }

    @Override
    public void initData()
    {
        SocketUtil.sendData(ConfigParams.ReadParameters);
    }

    private void initView(final View view)
    {
    }

    @Override
    public void setListener()
    {
        macAddButton.setOnClickListener(this);
        standByButton.setOnClickListener(this);
        overTimeButton.setOnClickListener(this);
        idLogicButton.setOnClickListener(this);
        tranAddButton.setOnClickListener(this);
        physicsChannelButton.setOnClickListener(this);
        airSpeedButton.setOnClickListener(this);
        initLru.setOnClickListener(this);
    }


    private String getLowHex(String data)
    {
        List<String> list = new ArrayList<>();
        String result = "";
        byte[] bytes = data.getBytes();
        Log.info(TAG, bytes.length + "");


        for (int i = 0; i < data.length(); i += 2)
        {
            String s = data.substring(i, i + 2);
            list.add(s);

        }

        for (int i = (list.size() - 1); i >= 0; i--)
        {
            result += list.get(i);
        }
        return result;
    }

    @Override
    public void onClick(View view)
    {
        String data = "";
        String type = "";
        int count = 0;
        switch (view.getId())
        {
            case R.id.mac_add_setting_button:
                data = macAdd.getText().toString().trim();
                if (TextUtils.isEmpty(data))
                {
                    return;
                }
                count = Integer.parseInt(data);
                data = ServiceUtils.getStr(Integer.toHexString(count) + "", 8);
                data = getLowHex(data);
                type = ConfigParams.SetPhysicalAddress;
                break;
            case R.id.standby_time_setting_button:
                data = standBy.getText().toString().trim();
                if (TextUtils.isEmpty(data))
                {
                    return;
                }
                count = Integer.parseInt(data);
                if (count < 0 || count > 65535)
                {
                    ToastUtil.showToastLong("待机时间间隔超出范围，请重新输入！");
                    return;
                }
                data = ServiceUtils.getStr(Integer.toHexString(count) + "", 4);
                data = getLowHex(data);
                type = ConfigParams.StandbyInterval;
                break;
            case R.id.over_time_setting_button:
                data = overTime.getText().toString().trim();
                if (TextUtils.isEmpty(data))
                {
                    return;
                }

                count = Integer.parseInt(data);
                if (count < 0 || count > 255)
                {
                    ToastUtil.showToastLong("超时时间超出范围，请重新输入！");
                    return;
                }

                data = ServiceUtils.getStr(Integer.toHexString(Integer.parseInt(data)) + "", 2);
                data = getLowHex(data);
                type = ConfigParams.LoraOverTime;
                break;

            case R.id.id_logic_setting_button:
                data = idLogic.getText().toString().trim();
                if (TextUtils.isEmpty(data))
                {
                    return;
                }

                count = Integer.parseInt(data);
                if (count < 0 || count > 65535)
                {
                    ToastUtil.showToastLong("ID(逻辑)超出范围，请重新输入！");
                    return;
                }
                data = ServiceUtils.getStr(Integer.toHexString(count) + "", 4);
                data = getLowHex(data);
                type = ConfigParams.LoRaAddress;
                break;
            case R.id.tran_add_setting_button:
                data = tranAdd.getText().toString().trim();
                if (TextUtils.isEmpty(data))
                {
                    return;
                }

                count = Integer.parseInt(data);
                if (count < 0 || count > 65535)
                {
                    ToastUtil.showToastLong("透传地址超出范围，请重新输入！");
                    return;
                }

                data = ServiceUtils.getStr(Integer.toHexString(count) + "", 4);
                data = getLowHex(data);
                type = ConfigParams.TransparentAddress;
                break;
            case R.id.physics_channel_setting_button:
                data = physicsChannel.getText().toString().trim();
                if (TextUtils.isEmpty(data))
                {
                    return;
                }

                count = Integer.parseInt(data);
                if (count < 0 || count > 32)
                {
                    ToastUtil.showToastLong("物理信道超出范围，请重新输入！");
                    return;
                }

                data = ServiceUtils.getStr(Integer.toHexString(count) + "", 2);
                type = ConfigParams.PhyChannel;
                break;
            case R.id.air_speed_setting_button:
                data = airSpeed.getText().toString().trim();
                if (TextUtils.isEmpty(data))
                {
                    return;
                }

                count = Integer.parseInt(data);
                if (count < 0 || count > 6)
                {
                    ToastUtil.showToastLong("空中速率超出范围，请重新输入！");
                    return;
                }
                data = ServiceUtils.getStr(Integer.toHexString(count) + "", 2);
                data = getLowHex(data);
                type = ConfigParams.AirVelocity;
                break;
            case R.id.init_lru:

                data = "";
                type = ConfigParams.FactoryInitialization;
                break;

            default:
                break;
        }

        String content = type + data;
        SocketUtil.sendData(content);
    }


    private byte[] getCheck()
    {
        byte[] check = new byte[2];
        check[0] = 0;
        check[1] = 0;

        for (int i = 0; i < head.length; i++)
        {
            check[0] += head[i];
            check[1] ^= head[i];
        }
        Log.info(TAG, "check[0]:" + check[0] + ",check[1]:" + check[1]);
        return check;
    }


    @Override
    public void didReceivedNotification(int id, Object... args)
    {
        if (id == UiEventEntry.READ_DATA)
        {
            String result = (String) args[0];
            String content = (String) args[1];
            if (TextUtils.isEmpty(result) || TextUtils.isEmpty(content))
            {
                return;
            }
            setData(result);

        }
    }

    private void setData(String result)
    {
        String data;
        int value;
        if (result.contains(ConfigParams.SetPhysicalAddress.trim()))
        {// 物理地址
            data = result.replaceAll(ConfigParams.SetPhysicalAddress, "");
            macAdd.setText(data);
        }
        else if (result.contains(ConfigParams.StandbyInterval.trim()))
        {// 待机时间间隔
            data = result.replaceAll(ConfigParams.StandbyInterval, "");
            standBy.setText(data);
        }
        else if (result.contains(ConfigParams.LoraOverTime.trim()))
        {// 超时时间
            data = result.replaceAll(ConfigParams.LoraOverTime, "");
            overTime.setText(data);
        }
        else if (result.contains(ConfigParams.LoRaAddress.trim()))
        {// ID逻辑
            data = result.replaceAll(ConfigParams.LoRaAddress, "");
            idLogic.setText(data);
        }
        else if (result.contains(ConfigParams.TransparentAddress.trim()))
        {//透传地址
            data = result.replaceAll(ConfigParams.TransparentAddress, "");
            tranAdd.setText(data);
        }
        else if (result.contains(ConfigParams.PhyChannel.trim()))
        {//物理信道
            data = result.replaceAll(ConfigParams.PhyChannel, "");
            physicsChannel.setText(data);
        }
        else if (result.contains(ConfigParams.AirVelocity.trim()))
        {//空中速率
            data = result.replaceAll(ConfigParams.AirVelocity, "");
            airSpeed.setText(data);
        }
    }

}
