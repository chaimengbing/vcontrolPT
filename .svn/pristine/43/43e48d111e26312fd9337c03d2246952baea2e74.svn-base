package com.vcontrol.vcontroliot.act;

import android.content.Intent;
import android.graphics.drawable.PaintDrawable;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.PopupWindow;
import android.widget.TextView;

import com.vcontrol.vcontroliot.R;
import com.vcontrol.vcontroliot.VcontrolApplication;
import com.vcontrol.vcontroliot.adapter.CustomAdapter;
import com.vcontrol.vcontroliot.adapter.CustomToAdapter;
import com.vcontrol.vcontroliot.fragment.ADFragment;
import com.vcontrol.vcontroliot.fragment.AtherPamarsFragment;
import com.vcontrol.vcontroliot.fragment.CameraFragment;
import com.vcontrol.vcontroliot.fragment.ChannelBEIFragment;
import com.vcontrol.vcontroliot.fragment.ChannelFragment;
import com.vcontrol.vcontroliot.fragment.ChannelGMSFragment;
import com.vcontrol.vcontroliot.fragment.ChannelGPRSFragment;
import com.vcontrol.vcontroliot.fragment.ChannelSelectFragment;
import com.vcontrol.vcontroliot.fragment.CollectFragment;
import com.vcontrol.vcontroliot.fragment.CommBasicSearchFragment;
import com.vcontrol.vcontroliot.fragment.CommParamsFragment;
import com.vcontrol.vcontroliot.fragment.CommRtuChannelFragment;
import com.vcontrol.vcontroliot.fragment.CommRtuSysFragment;
import com.vcontrol.vcontroliot.fragment.CommSensorFragment;
import com.vcontrol.vcontroliot.fragment.FlowFragment;
import com.vcontrol.vcontroliot.fragment.GroundADFragment;
import com.vcontrol.vcontroliot.fragment.GroundServerFragment;
import com.vcontrol.vcontroliot.fragment.GroundWaterBasicFragment;
import com.vcontrol.vcontroliot.fragment.GroundWaterSearchFragment;
import com.vcontrol.vcontroliot.fragment.LruSearchFragment;
import com.vcontrol.vcontroliot.fragment.LruSysPamarsFragment;
import com.vcontrol.vcontroliot.fragment.RTUVersionFragment;
import com.vcontrol.vcontroliot.fragment.RainPamarsFragment;
import com.vcontrol.vcontroliot.fragment.RcmFunPamarsFragment;
import com.vcontrol.vcontroliot.fragment.RcmFunSearchFragment;
import com.vcontrol.vcontroliot.fragment.RcmSearchFragment;
import com.vcontrol.vcontroliot.fragment.RcmSysPamarsFragment;
import com.vcontrol.vcontroliot.fragment.SQFragment;
import com.vcontrol.vcontroliot.fragment.SearchDataFragment;
import com.vcontrol.vcontroliot.fragment.SearchFragment;
import com.vcontrol.vcontroliot.fragment.SystemPamarsFragment;
import com.vcontrol.vcontroliot.fragment.WaterPamarsFragment;
import com.vcontrol.vcontroliot.fragment.WaterPlanFragment;
import com.vcontrol.vcontroliot.fragment.ZWFragment;
import com.vcontrol.vcontroliot.log.Log;
import com.vcontrol.vcontroliot.util.ConfigParams;
import com.vcontrol.vcontroliot.util.EventNotifyHelper;
import com.vcontrol.vcontroliot.util.FgManager;
import com.vcontrol.vcontroliot.util.ProgressBarUtil;
import com.vcontrol.vcontroliot.util.SocketUtil;
import com.vcontrol.vcontroliot.util.ToastUtil;
import com.vcontrol.vcontroliot.util.UiEventEntry;
import com.vcontrol.vcontroliot.util.UiUtils;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by Vcontrol on 2016/11/24.
 */

public class  HomeActivity extends BaseActivity implements PopupWindow.OnDismissListener, EventNotifyHelper.NotificationCenterDelegate
{
    private static final String TAG = HomeActivity.class.getSimpleName();
    private int currentType = 200;

    private LinearLayout titleLayout;
    private LinearLayout bottomLayout;
    private LinearLayout bottomenuLayout;
    private TextView rtuSetting;
    private TextView rtuSearch;
    private TextView rtuVersion;
    private int currentTab = 44;


    private LinearLayout setLayout;
    private TextView setTextView;
    private ImageView iconImageView;

    private ListView setListView;
    private ListView setToListView;
    private TextView sensorTextView;
    private LinearLayout sensorLayout;

    private CustomToAdapter setToAdapter;
    private CustomAdapter setAdapter;
    private String tabName = "";

    private PopupWindow popupWindow;
    private List<String> searchList;
    private List<String> setList;
    private List<String> setToList;
    private List<String> setToChannelList;

    private SearchFragment gprsFragment = null;
    private ADFragment adFragment = null;
    private CommBasicSearchFragment commFragment = null;
    private LruSearchFragment LruSearch = null;
    private RcmSearchFragment rcmSearch = null;
    private RcmFunSearchFragment rcmFunSearch = null;
    private ChannelFragment channelFragment = null;

    //当前选项
    private int currentSel = 100;

    @Override
    public int getLayoutView()
    {
        return R.layout.fragment_rtu_basic;
    }

    @Override
    public void initViewData()
    {
        //显示toolbar
        showToolbar();
        setTitleName(rtuSetting.getText().toString().trim());

        rtuSetting.setOnClickListener(this);
        rtuSearch.setOnClickListener(this);
        rtuVersion.setOnClickListener(this);

        if (getIntent() != null)
        {
            String name = getIntent().getStringExtra(UiEventEntry.NOTIFY_BASIC_NAME);
            currentType = getIntent().getIntExtra(UiEventEntry.NOTIFY_BASIC_TYPE,UiEventEntry.WRU_1901);
            setTitleMain(name);
        }

        if (currentType == UiEventEntry.WRU_2800 || currentType == UiEventEntry.WRU_2801 || currentType == UiEventEntry.WRU_2100)
        {
            currentSel = UiEventEntry.TAB_SETTING_SYS;
            turnToFragmentStack(R.id.detail_layout, SystemPamarsFragment.class);
            currentSel = UiEventEntry.TAB_SETTING_SYS;
        }
        else if (currentType == UiEventEntry.WRU_1901)
        {
            turnToFragmentStack(R.id.detail_layout, GroundWaterBasicFragment.class);
            setCurrentSel(UiEventEntry.TAB_GROUND_WATER_BASIC);
        }
        else if (currentType == UiEventEntry.RTU_2800 || currentType == UiEventEntry.RTU_2801)
        {

            turnToFragmentStack(R.id.detail_layout, CommRtuSysFragment.class);
            setCurrentSel(UiEventEntry.TAB_COMM_SYSTEM);
            currentSel = UiEventEntry.TAB_GROUND_WATER_BASIC;
        }
        else if (currentType == UiEventEntry.LRU_3000)
        {
            turnToFragmentStack(R.id.detail_layout,LruSysPamarsFragment.class);
            currentSel = UiEventEntry.TAB_LRU_SYS;
            titleLayout.setVisibility(View.GONE);
        }
        else if (currentType == UiEventEntry.RCM_2000)
        {
            turnToFragmentStack(R.id.detail_layout,RcmSysPamarsFragment.class);
            currentSel = UiEventEntry.TAB_RCM_SYS;
        }
        else if (currentType == UiEventEntry.LRU_3100)
        {
            turnToFragmentStack(R.id.detail_layout,ControlShowFragment.class);
            currentSel = UiEventEntry.TAB_LRU_CONTROL;
            bottomenuLayout.setVisibility(View.GONE);
            bottomLayout.setVisibility(View.GONE);
        }

        setTitleRightVisible(View.VISIBLE);
        setTitleRight(getString(R.string.update));
        initSetData();
        initSetToData();
        initSetChannelData();
        initSearchData();


        if (setList.size() > 0)
        {
            setTextView.setText(setList.get(0));
        }
        setLayout.setOnClickListener(this);

    }

    public void setCurrentSel(int currentSel)
    {
        this.currentSel = currentSel;
    }

    private void initSetToData()
    {

        setToList.add(getString(R.string.rain_pamars));
        setToList.add(getString(R.string.water_pamars));
        setToList.add(getString(R.string.water_plan));
        setToList.add(getString(R.string.camera));
        setToList.add(getString(R.string.shangqing));
        setToList.add(getString(R.string.gprs_plan));
        setToList.add(getString(R.string.zawei_plan));
        setToList.add(getString(R.string.ather_pamars));

    }

    private void initSetChannelData()
    {

        setToChannelList.add(getString(R.string.channel_select));
        setToChannelList.add(getString(R.string.gprs_pamars));
        setToChannelList.add(getString(R.string.gms_pamars));
        setToChannelList.add(getString(R.string.bei_pamars));

    }

    private void initSetData()
    {
        if (currentType == UiEventEntry.WRU_2800 || currentType == UiEventEntry.WRU_2801 || currentType == UiEventEntry.WRU_2100)
        {
            setList.add(getString(R.string.system_params_setting));
            setList.add(getString(R.string.collect_setting));
            setList.add(getString(R.string.comm_params_setting));
            setList.add(getString(R.string.channel_setting));
            setList.add(getString(R.string.sensor_setting));
            setList.add(getString(R.string.ad_setting));
        }
        else if (currentType == UiEventEntry.WRU_1901)
        {
            setList.add(getString(R.string.groundwater_basic_setting));
            setList.add(getString(R.string.groundwater_server_setting));
            setList.add(getString(R.string.ad_setting));
        }
        else if (currentType == UiEventEntry.RTU_2801 || currentType == UiEventEntry.RTU_2800)
        {
            setList.add("系统参数设置");
            setList.add("通讯参数设置");
            setList.add("传感器设置");
            setList.add(getString(R.string.ad_setting));

        }
        else if (currentType == UiEventEntry.LRU_3100 )
        {
            setList.add("RTU-1");
            setList.add("RTU-2");
            setList.add("RTU-3");
            setList.add("RTU-4");

        }
        else if (currentType == UiEventEntry.RCM_2000 )
        {
            setList.add("系统板设置");
            setList.add("功能板设置");
        }

    }

    @Override
    public void initComponentViews()
    {
        EventNotifyHelper.getInstance().addObserver(this, UiEventEntry.READ_RESULT_ERROR);
        EventNotifyHelper.getInstance().addObserver(this, UiEventEntry.READ_RESULT_OK);
        EventNotifyHelper.getInstance().addObserver(this, UiEventEntry.CONNCT_AGAIN);
        EventNotifyHelper.getInstance().addObserver(this, UiEventEntry.CONNCT_OK);
        EventNotifyHelper.getInstance().addObserver(this, UiEventEntry.CONNCT_FAIL);

        VcontrolApplication.getInstance().addActivity(this);

        VcontrolApplication.setCurrentContext(getApplicationContext());
        ToastUtil.setCurrentContext(getApplication());
        rtuSetting = (TextView) findViewById(R.id.rtu_setting);
        rtuSearch = (TextView) findViewById(R.id.rtu_search);
        rtuVersion = (TextView) findViewById(R.id.rtu_version);

        titleLayout = (LinearLayout) findViewById(R.id.ll_layout);
        bottomenuLayout = (LinearLayout) findViewById(R.id.bottom_menu_layout);
        bottomLayout = (LinearLayout) findViewById(R.id.bottom_layout);
        setLayout = (LinearLayout) findViewById(R.id.ll_setting);
        setTextView = (TextView) findViewById(R.id.set_textview);
        iconImageView = (ImageView) findViewById(R.id.icon_default);

        setList = new ArrayList<>();
        setToList = new ArrayList<>();
        setToChannelList = new ArrayList<>();
        searchList = new ArrayList<>();

    }


    @Override
    protected void onDestroy()
    {
        super.onDestroy();
        Log.debug(TAG, "onDestroy::");
        EventNotifyHelper.getInstance().removeObserver(this, UiEventEntry.READ_RESULT_OK);
        EventNotifyHelper.getInstance().removeObserver(this, UiEventEntry.READ_RESULT_ERROR);
        EventNotifyHelper.getInstance().removeObserver(this, UiEventEntry.CONNCT_AGAIN);
        EventNotifyHelper.getInstance().removeObserver(this, UiEventEntry.CONNCT_OK);
        EventNotifyHelper.getInstance().removeObserver(this, UiEventEntry.CONNCT_FAIL);
    }

    private void selRtu(TextView textView, int id)
    {

        if (textView != null)
        {
            textView.setTextColor(getResources().getColor(R.color.bottomblack));
            textView.setCompoundDrawablesWithIntrinsicBounds(null, getResources().getDrawable(id), null, null);
        }
    }

    private void nolRtu(TextView textView, int id)
    {
        if (textView != null)
        {
            textView.setTextColor(getResources().getColor(R.color.white));
            textView.setCompoundDrawablesWithIntrinsicBounds(null, getResources().getDrawable(id), null, null);
        }
    }

    @Override
    public void onClick(View view)
    {
//        bundle.clear();
        String rtuDetail = "";
        switch (view.getId())
        {
            case R.id.rtu_setting:
                SearchFragment gprsFragment = (SearchFragment) FgManager.getFragment(SearchFragment.class);
                if (gprsFragment != null && gprsFragment.isVisible())
                {
                    gprsFragment.stopUpdate();
                }

                rtuDetail = rtuSetting.getText().toString().trim();
                setTitleName(rtuDetail);
                selRtu(rtuSetting, R.mipmap.rtu_setting_sel);
                nolRtu(rtuSearch, R.mipmap.rtu_search);
                nolRtu(rtuVersion, R.mipmap.rtu_version);


                titleLayout.setVisibility(View.VISIBLE);
                if (setList.size() > 0)
                {
                    setTextView.setText(setList.get(0));
                }
                currentTab = UiEventEntry.TAB_SETTING;

                if (currentType == UiEventEntry.WRU_2800 || currentType == UiEventEntry.WRU_2801 || currentType == UiEventEntry.WRU_2100)
                {
                    currentSel = UiEventEntry.TAB_SETTING_SYS;
                    turnToFragmentStack(R.id.detail_layout, SystemPamarsFragment.class);
                }
                else if (currentType == UiEventEntry.WRU_1901)
                {
                    turnToFragmentStack(R.id.detail_layout, GroundWaterBasicFragment.class);
                    setCurrentSel(UiEventEntry.TAB_GROUND_WATER_BASIC);
                }
                else if (currentType == UiEventEntry.RTU_2800 || currentType == UiEventEntry.RTU_2801)
                {

                    turnToFragmentStack(R.id.detail_layout, CommRtuSysFragment.class);
                    setCurrentSel(UiEventEntry.TAB_COMM_SYSTEM);
                }
                else if (currentType == UiEventEntry.LRU_3000)
                {

                    turnToFragmentStack(R.id.detail_layout, LruSysPamarsFragment.class);
                    setCurrentSel(UiEventEntry.TAB_LRU_SYS);
                    titleLayout.setVisibility(View.GONE);
                }
                else if (currentType == UiEventEntry.RCM_2000)
                {

                    turnToFragmentStack(R.id.detail_layout, RcmSysPamarsFragment.class);
                    setCurrentSel(UiEventEntry.TAB_RCM_SYS);
                }
                updateRight();
                setTitleRightVisible(View.VISIBLE);

                if (setList.size() == 1)
                {
                    iconImageView.setVisibility(View.GONE);
                }
                else
                {
                    iconImageView.setVisibility(View.VISIBLE);
                }

                break;
            case R.id.rtu_search:
                rtuDetail = rtuSearch.getText().toString().trim();
                setTitleName(rtuDetail);

                selRtu(rtuSearch, R.mipmap.rtu_search_sel);
                nolRtu(rtuSetting, R.mipmap.rtu_setting);
                nolRtu(rtuVersion, R.mipmap.rtu_version);


                titleLayout.setVisibility(View.VISIBLE);
                if (searchList.size() > 0)
                {
                    setTextView.setText(searchList.get(0));
                }
                currentTab = UiEventEntry.TAB_SEARCH;


                if (currentType == UiEventEntry.WRU_2800 || currentType == UiEventEntry.WRU_2801 || currentType == UiEventEntry.WRU_2100)
                {
                    currentSel = UiEventEntry.TAB_SEARCH_BASIC;
                    SearchFragment fragment = (SearchFragment) FgManager.getFragment(SearchFragment.class);
                    if (!fragment.isVisible())
                    {
                        turnToFragmentStack(R.id.detail_layout, SearchFragment.class);
                    }
                }
                else if (currentType == UiEventEntry.WRU_1901)
                {
                    turnToFragmentStack(R.id.detail_layout, GroundWaterSearchFragment.class);
                    setCurrentSel(UiEventEntry.TAB_GROUND_WATER_ALL);
                }
                else if (currentType == UiEventEntry.RTU_2801 || currentType == UiEventEntry.RTU_2800)
                {
                    turnToFragmentStack(R.id.detail_layout, CommBasicSearchFragment.class);
                    setCurrentSel(UiEventEntry.TAB_COMM_BASIC);
                }
                else if (currentType == UiEventEntry.LRU_3000)
                {
                    turnToFragmentStack(R.id.detail_layout, LruSearchFragment.class);
                    setCurrentSel(UiEventEntry.TAB_LRU_SEARCH);
                    titleLayout.setVisibility(View.GONE);
                }
                else if (currentType == UiEventEntry.RCM_2000)
                {
                    turnToFragmentStack(R.id.detail_layout, RcmSearchFragment.class);
                    setCurrentSel(UiEventEntry.TAB_RCM_SEARCH);
                }

                updateRight();
                setTitleRightVisible(View.VISIBLE);

                if (searchList.size() == 1)
                {
                    iconImageView.setVisibility(View.GONE);
                }
                else
                {
                    iconImageView.setVisibility(View.VISIBLE);
                }

                break;
            case R.id.rtu_version:
                rtuDetail = rtuVersion.getText().toString().trim();
                setTitleName(rtuDetail);

                selRtu(rtuVersion, R.mipmap.rtu_version_sel);
                nolRtu(rtuSetting, R.mipmap.rtu_setting);
                nolRtu(rtuSearch, R.mipmap.rtu_search);

                titleLayout.setVisibility(View.GONE);

                currentTab = UiEventEntry.TAB_VERSION;
                currentSel = UiEventEntry.TAB_SETTING_VERSION;

                Bundle bundle = new Bundle();
                bundle.putInt(UiEventEntry.CURRENT_RTU_NAME, currentType);

                turnToFragmentStack(R.id.detail_layout, RTUVersionFragment.class, bundle);

                setTitleRightVisible(View.GONE);
                break;

            case R.id.title_main:
                backMain();
                break;
            case R.id.title_right:
                //刷新或重新连接Socket
                Log.debug(TAG, "update::");
                updateData();
                break;
            case R.id.ll_setting:
                iconImageView.setImageResource(R.mipmap.icon_sel);
                showPopupWindow(setLayout);
                break;
            case R.id.sensor_textview:
                sensorLayout.setVisibility(View.GONE);
                setListView.setVisibility(View.VISIBLE);
                break;

        }
    }


    @Override
    public void onBackPressed()
    {
        super.onBackPressed();
        backMain();
    }

    private void backMain()
    {
        SocketUtil.getSocketUtil().closeSocketClient();
        Intent intent = new Intent(this, MainActivity.class);
        intent.putExtra(UiEventEntry.NOTIFY_NOWEL, true);
        startActivity(intent);
    }

    private void updateData()
    {

        if (currentType == UiEventEntry.WRU_2800 || currentType == UiEventEntry.WRU_2801 || currentType == UiEventEntry.WRU_2100)
        {
            if (titleRight == null)
            {
                return;
            }
            if (getString(R.string.re_connect).equals(titleRight.getText().toString().trim()))
            {
                SocketUtil.getSocketUtil().connectRTU(ConfigParams.IP, ConfigParams.PORT);
            }
            else
            {
                switch (currentSel)
                {
                    case UiEventEntry.TAB_CHANNEL_SELECT:
                        SocketUtil.getSocketUtil().sendContent(ConfigParams.ReadCommPara1);
                        break;
                    case UiEventEntry.TAB_CHANNEL_GPRS:
                    case UiEventEntry.TAB_CHANNEL_GMS:
                        SocketUtil.getSocketUtil().sendContent(ConfigParams.ReadCommPara2);
                        break;
                    case UiEventEntry.TAB_CHANNEL_BEI:
                        SocketUtil.getSocketUtil().sendContent(ConfigParams.ReadCommPara3);
                        break;
                    case UiEventEntry.TAB_SETTING_SYS:
                        SocketUtil.getSocketUtil().sendContent(ConfigParams.ReadSystemPara);
                        break;
                    case UiEventEntry.TAB_SETTING_COLLECT:
                        SocketUtil.getSocketUtil().sendContent(ConfigParams.ReadSystemPara);
                        break;
                    case UiEventEntry.TAB_SETTING_COMM:
                        SocketUtil.getSocketUtil().sendContent(ConfigParams.ReadCommPara1);
                        break;
                    case UiEventEntry.TAB_SETTING_CHANNEL:
                        if (channelFragment == null)
                        {
                            channelFragment = (ChannelFragment) FgManager.getFragment(ChannelFragment.class);
                        }

                        if (channelFragment != null)
                        {
                            channelFragment.refreshData();
                        }
                        break;
                    case UiEventEntry.TAB_SENSOR_RAIN:
                    case UiEventEntry.TAB_SENSOR_WATER_PARAMS:
                        SocketUtil.getSocketUtil().sendContent(ConfigParams.ReadSensorPara1);
                        break;
                    case UiEventEntry.TAB_SENSOR_WATER_PLAN:
                    case UiEventEntry.TAB_SENSOR_CAMERA:
                    case UiEventEntry.TAB_SENSOR_ATHER:
                    case UiEventEntry.TAB_SETTING_VERSION:
                        SocketUtil.getSocketUtil().sendContent(ConfigParams.ReadSensorPara2);
                        break;
                    case UiEventEntry.TAB_SENSOR_SQ:
                        SocketUtil.getSocketUtil().sendContent(ConfigParams.ReadMoisture_SensorPara);
                        break;
                    case UiEventEntry.TAB_SENSOR_FLOW:
                        SocketUtil.getSocketUtil().sendContent(ConfigParams.ReadSensorPara2);
                        break;
                    case UiEventEntry.TAB_SENSOR_ZW:
                        break;
                    case UiEventEntry.TAB_SEARCH_BASIC:
                        if (gprsFragment == null)
                        {
                            gprsFragment = (SearchFragment) FgManager.getFragment(SearchFragment.class);
                        }
                        if (gprsFragment != null && gprsFragment.isVisible())
                        {
                            gprsFragment.setData();
                        }
                        break;
                    case UiEventEntry.TAB_SEARCH_GPRS:
                    case UiEventEntry.TAB_SEARCH_CAMERA:
                        if (currentSel == UiEventEntry.TAB_SEARCH_CAMERA)
                        {
                            SocketUtil.getSocketUtil().sendContent(ConfigParams.SENDPIC);
                        }
                        if (gprsFragment == null)
                        {
                            gprsFragment = (SearchFragment) FgManager.getFragment(SearchFragment.class);
                        }
                        if (gprsFragment != null && gprsFragment.isVisible())
                        {
                            gprsFragment.updateData();
                        }
                        break;

                    case UiEventEntry.TAB_SEARCH_SENSOR:
                        if (gprsFragment == null)
                        {
                            gprsFragment = (SearchFragment) FgManager.getFragment(SearchFragment.class);
                        }
                        if (gprsFragment.isVisible())
                        {
                            gprsFragment.setData();
                        }
                        break;
                    case UiEventEntry.TAB_SETTING_AD:
                        if (adFragment == null)
                        {
                            adFragment = (ADFragment) FgManager.getFragment(ADFragment.class);
                        }
                        if (adFragment.isVisible())
                        {
                            adFragment.setData();
                        }
                        break;
                    case UiEventEntry.TAB_SEARCH_READ_IMAGE:
                        ProgressBarUtil.showProgressDialog(HomeActivity.this, "", "正在接收图片...");
                        SocketUtil.getSocketUtil().startReceImage();
                        SocketUtil.getSocketUtil().sendContent(ConfigParams.ReadImage + "000");
                        break;
                    case UiEventEntry.TAB_SEARCH_RADATA:
                        break;
                }
            }
        }
        else if (currentType == UiEventEntry.WRU_1901)
        {
            if (titleRight == null)
            {
                return;
            }
            GroundServerFragment serverFragment = null;
            GroundWaterSearchFragment gprsFragment = null;
            if (getString(R.string.re_connect).equals(titleRight.getText().toString().trim()))
            {
                SocketUtil.getSocketUtil().connectRTU(ConfigParams.IP, ConfigParams.GROUND_PORT);
            }
            else if (getString(R.string.collect_ad_lv).equals(titleRight.getText().toString().trim()))
            {
                SocketUtil.getSocketUtil().sendContent(ConfigParams.ReadBattery);
            }
            else
            {

                if (currentSel == UiEventEntry.TAB_GROUND_WATER_ALL)
                {//全部参数  常规设置
                    SocketUtil.getSocketUtil().sendContent(ConfigParams.ReadData);
                    if (gprsFragment == null)
                    {
                        gprsFragment = (GroundWaterSearchFragment) FgManager.getFragment(GroundWaterSearchFragment.class);
                    }
                    if (gprsFragment != null && gprsFragment.isVisible())
                    {
                        gprsFragment.setData();
                    }
                }
                else if (currentSel == UiEventEntry.TAB_GROUND_WATER_BASIC)
                {//服务器设置
                    SocketUtil.getSocketUtil().sendContent(ConfigParams.ReadData);

                }
                else if (currentSel == UiEventEntry.TAB_GROUND_WATER_SERVER)
                {//服务器设置
                    if (serverFragment == null)
                    {
                        serverFragment = (GroundServerFragment) FgManager.getFragment(GroundServerFragment.class);
                    }
                    if (serverFragment != null && serverFragment.isVisible())
                    {
                        serverFragment.initData();
                    }
                }
            }

        }
        else if (currentType == UiEventEntry.RTU_2800 || currentType == UiEventEntry.RTU_2801)
        {
            if (titleRight == null)
            {
                return;
            }
            if (getString(R.string.re_connect).equals(titleRight.getText().toString().trim()))
            {
                SocketUtil.getSocketUtil().connectRTU(ConfigParams.IP, ConfigParams.PORT);
            }
            else
            {
                if (currentSel == UiEventEntry.TAB_COMM_SYSTEM)
                {//全部参数  常规设置
                    SocketUtil.getSocketUtil().sendContent(ConfigParams.ReadParameter);
                }
                else if (currentSel == UiEventEntry.TAB_COMM_COMM)
                {
                    SocketUtil.getSocketUtil().sendContent(ConfigParams.ReadStaticIP);

                }
                else if (currentSel == UiEventEntry.TAB_COMM_BASIC)
                {
                    if (commFragment == null)
                    {
                        commFragment = (CommBasicSearchFragment) FgManager.getFragment(CommBasicSearchFragment.class);
                    }
                    if (commFragment != null && commFragment.isVisible())
                    {
                        commFragment.setData();
                    }
                }
            }
        }
        else if (currentType == UiEventEntry.LRU_3000)
        {
            if (titleRight == null)
            {
                return;
            }
            if (getString(R.string.re_connect).equals(titleRight.getText().toString().trim()))
            {
                SocketUtil.getSocketUtil().connectRTU(ConfigParams.LRU_IP, ConfigParams.LRU_PORT);
            }
            else
            {
                if (currentSel == UiEventEntry.TAB_LRU_SYS)
                {//全部参数  常规设置
                    SocketUtil.getSocketUtil().sendContent(ConfigParams.ReadParameters);
                }
                else if (currentSel == UiEventEntry.TAB_LRU_SEARCH)
                {

                    if (LruSearch == null)
                    {
                        LruSearch = (LruSearchFragment) FgManager.getFragment(LruSearchFragment.class);
                    }
                    if (LruSearch != null && LruSearch.isVisible())
                    {
                        LruSearch.setData();
                    }
                }
            }
        }
        else if (currentType == UiEventEntry.RCM_2000)
        {
            if (titleRight == null)
            {
                return;
            }
            if (getString(R.string.re_connect).equals(titleRight.getText().toString().trim()))
            {
                SocketUtil.getSocketUtil().connectRTU(ConfigParams.LRU_IP, ConfigParams.LRU_PORT);
            }
            else
            {
                if (currentSel == UiEventEntry.TAB_RCM_SYS)
                {//全部参数  常规设置
                    SocketUtil.getSocketUtil().sendContent(ConfigParams.ReadData);
                }
                else if (currentSel == UiEventEntry.TAB_RCM_SEARCH)
                {

                    if (rcmSearch == null)
                    {
                        rcmSearch = (RcmSearchFragment) FgManager.getFragment(RcmSearchFragment.class);
                    }
                    if (rcmSearch != null && rcmSearch.isVisible())
                    {
                        rcmSearch.setData();
                    }
                }
                else if (currentSel == UiEventEntry.TAB_RCM_FUN_SYS)
                {//全部参数  常规设置
                    SocketUtil.getSocketUtil().sendContent(ConfigParams.ReadFunctionData);
                }
                else if (currentSel == UiEventEntry.TAB_RCM_FUN_SEARCH)
                {

                    if (rcmFunSearch == null)
                    {
                        rcmFunSearch = (RcmFunSearchFragment) FgManager.getFragment(RcmFunSearchFragment.class);
                    }
                    if (rcmFunSearch != null && rcmFunSearch.isVisible())
                    {
                        rcmFunSearch.setData();
                    }
                }
            }
        }

    }

    private void initSearchData()
    {
        if (currentType == UiEventEntry.WRU_2800 || currentType == UiEventEntry.WRU_2801 || currentType == UiEventEntry.WRU_2100)
        {
            searchList.add(getString(R.string.basic_search));
            searchList.add(getString(R.string.comm_status_search));
            searchList.add(getString(R.string.camera_search));
            searchList.add(getString(R.string.sensor_status_search));
            searchList.add(getString(R.string.read_image));
            searchList.add("历史数据");
        }
        else if (currentType == UiEventEntry.WRU_1901)
        {
            searchList.add(getString(R.string.groundwater_all));
        }
        else if (currentType == UiEventEntry.RTU_2800 || currentType == UiEventEntry.RTU_2801)
        {
            searchList.add("基本显示");
        }
        else if (currentType == UiEventEntry.RCM_2000)
        {
            searchList.add("系统板参数");
            searchList.add("功能板参数");
        }

    }


    public void showPopupWindow(View anchor)
    {
        if (popupWindow == null)
        {
            popupWindow = new PopupWindow(getApplicationContext());
            View contentView = LayoutInflater.from(getApplicationContext()).inflate(
                    R.layout.windows_popupwindow, null);
            setListView = (ListView) contentView.findViewById(R.id.set_listview);
            setToListView = (ListView) contentView.findViewById(R.id.set_to_listview);
            sensorTextView = (TextView) contentView.findViewById(R.id.sensor_textview);
            sensorLayout = (LinearLayout) contentView.findViewById(R.id.sensor_layout);
            sensorTextView.setOnClickListener(this);

            popupWindow.setOnDismissListener(this);
            popupWindow.setWidth(UiUtils.width);
            popupWindow.setHeight(UiUtils.height);
            popupWindow.setContentView(contentView);
            popupWindow.setFocusable(true);
            popupWindow.setOutsideTouchable(true);
            popupWindow.setBackgroundDrawable(new PaintDrawable());
        }

        if (currentTab == UiEventEntry.TAB_SEARCH)
        {
            setAdapter = new CustomAdapter(getApplicationContext(), searchList);
            sensorLayout.setVisibility(View.GONE);
            setListView.setVisibility(View.VISIBLE);
        }
        else
        {
            setAdapter = new CustomAdapter(getApplicationContext(), setList);
        }
        setListView.setAdapter(setAdapter);

        if (currentType == UiEventEntry.WRU_2800 || currentType == UiEventEntry.WRU_2801 || currentType == UiEventEntry.WRU_2100)
        {//RTU
            handRTU(setListView);
        }
        else if (currentType == UiEventEntry.WRU_1901)
        {//地下水
            handGroundWater(setListView);
        }
        else if (currentType == UiEventEntry.RTU_2800 || currentType == UiEventEntry.RTU_2801)
        {//通用RTU
            handCommRTU(setListView);
        }
        else if (currentType == UiEventEntry.RCM_2000)
        {//一体化摄像头
            handRcmRTU(setListView);
        }
        popupWindow.showAsDropDown(anchor);

    }

    private void handCommRTU(final ListView setListView)
    {
        setListView.setOnItemClickListener(new AdapterView.OnItemClickListener()
        {
            @Override
            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l)
            {
                if (currentTab == UiEventEntry.TAB_SEARCH)
                {
                }
                else
                {
                    tabName = setList.get(i);
                    if (i == 0)
                    {//系统参数设置
                        turnToFragmentStack(R.id.detail_layout, CommRtuSysFragment.class);
                        setCurrentSel(UiEventEntry.TAB_COMM_SYSTEM);
                        setTitleRightVisible(View.VISIBLE);
                    }
                    else if (i == 1)
                    {//通讯参数
                        turnToFragmentStack(R.id.detail_layout, CommRtuChannelFragment.class);
                        setCurrentSel(UiEventEntry.TAB_COMM_COMM);
                        setTitleRightVisible(View.VISIBLE);
                    }
                    else if (i == 2)
                    {//传感器设置
                        setTitleRightVisible(View.GONE);
                        turnToFragmentStack(R.id.detail_layout, CommSensorFragment.class);
                        setCurrentSel(UiEventEntry.TAB_COMM_SENSOR);
                    }
                    else if (i == 3)
                    {//传感器设置
                        setTitleRightVisible(View.GONE);
                        turnToFragmentStack(R.id.detail_layout, ADFragment.class);
                        setCurrentSel(UiEventEntry.TAB_SETTING_AD);
                    }
                }

                setTextView.setText(tabName);
                popupWindow.dismiss();

            }
        });
    }

    private void handRcmRTU(final ListView setListView)
    {
        setListView.setOnItemClickListener(new AdapterView.OnItemClickListener()
        {
            @Override
            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l)
            {
                if (currentTab == UiEventEntry.TAB_SEARCH)
                {
                    tabName = searchList.get(i);
                    if (i == 0)
                    {//系统板参数
                        turnToFragmentStack(R.id.detail_layout, RcmSearchFragment.class);
                        setCurrentSel(UiEventEntry.TAB_RCM_SEARCH);
                    }
                    else if (i == 1)
                    {//功能板参数
                        turnToFragmentStack(R.id.detail_layout, RcmFunSearchFragment.class);
                        setCurrentSel(UiEventEntry.TAB_RCM_FUN_SEARCH);
                    }
                }
                else
                {
                    tabName = setList.get(i);
                    if (i == 0)
                    {//系统板参数设置
                        turnToFragmentStack(R.id.detail_layout, RcmSysPamarsFragment.class);
                        setCurrentSel(UiEventEntry.TAB_RCM_SYS);
                    }
                    else if (i == 1)
                    {//功能板参数
                        turnToFragmentStack(R.id.detail_layout, RcmFunPamarsFragment.class);
                        setCurrentSel(UiEventEntry.TAB_RCM_FUN_SYS);
                    }

                }

                setTextView.setText(tabName);
                popupWindow.dismiss();

            }
        });
    }

    private void handGroundWater(final ListView setListView)
    {
        setListView.setOnItemClickListener(new AdapterView.OnItemClickListener()
        {
            @Override
            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l)
            {
                if (currentTab == UiEventEntry.TAB_SEARCH)
                {
                }
                else
                {
                    tabName = setList.get(i);
                    setTitleRight(getString(R.string.update));
                    if (i == 0)
                    {//常规设置
                        turnToFragmentStack(R.id.detail_layout, GroundWaterBasicFragment.class);
                        setCurrentSel(UiEventEntry.TAB_GROUND_WATER_BASIC);
                    }
                    else if (i == 1)
                    {//服务器
                        turnToFragmentStack(R.id.detail_layout, GroundServerFragment.class);
                        setCurrentSel(UiEventEntry.TAB_GROUND_WATER_SERVER);
                    }
                    else if (i == 2)
                    {//AD设置
                        setTitleRight(getString(R.string.collect_ad_lv));
                        turnToFragmentStack(R.id.detail_layout, GroundADFragment.class);
                        setCurrentSel(UiEventEntry.TAB_GROUND_WATER_AD);
                    }
                }

                setTextView.setText(tabName);
                popupWindow.dismiss();

            }
        });
    }

    private void handSensor()
    {
        sensorTextView.setText("传感器设置");
        sensorLayout.setVisibility(View.VISIBLE);
        setListView.setVisibility(View.GONE);
        setToAdapter = new CustomToAdapter(getApplicationContext(),
                setToList);
        setToListView.setAdapter(setToAdapter);
        setToListView.setOnItemClickListener(new AdapterView.OnItemClickListener()
        {

            @Override
            public void onItemClick(AdapterView<?> parent,
                                    View view, int position, long id)
            {
                if (position == UiEventEntry.NOTIFY_SENSOR_RAIN)
                {
                    turnToFragmentStack(R.id.detail_layout, RainPamarsFragment.class);
                    setCurrentSel(UiEventEntry.TAB_SENSOR_RAIN);
                }
                else if (position == UiEventEntry.NOTIFY_SENSOR_WATER_PARAMS)
                {
                    setCurrentSel(UiEventEntry.TAB_SENSOR_WATER_PARAMS);
                    turnToFragmentStack(R.id.detail_layout, WaterPamarsFragment.class);
                }
                else if (position == UiEventEntry.NOTIFY_SENSOR_WATER_PLAN)
                {
                    setCurrentSel(UiEventEntry.TAB_SENSOR_WATER_PLAN);
                    turnToFragmentStack(R.id.detail_layout, WaterPlanFragment.class);
                }
                else if (position == UiEventEntry.NOTIFY_SENSOR_CAMERA)
                {
                    turnToFragmentStack(R.id.detail_layout, CameraFragment.class);
                    setCurrentSel(UiEventEntry.TAB_SENSOR_CAMERA);
                }
                else if (position == UiEventEntry.NOTIFY_SENSOR_SQ)
                {
                    turnToFragmentStack(R.id.detail_layout, SQFragment.class);
                    setCurrentSel(UiEventEntry.TAB_SENSOR_SQ);
                }
                else if (position == UiEventEntry.NOTIFY_SENSOR_FLOW)
                {
                    turnToFragmentStack(R.id.detail_layout, FlowFragment.class);
                    setCurrentSel(UiEventEntry.TAB_SENSOR_FLOW);
                }
                else if (position == UiEventEntry.NOTIFY_SENSOR_ZW)
                {
                    turnToFragmentStack(R.id.detail_layout, ZWFragment.class);
                    setCurrentSel(UiEventEntry.TAB_SENSOR_ZW);
                }
                else if (position == UiEventEntry.NOTIFY_SENSOR_ATHER)
                {
                    setCurrentSel(UiEventEntry.TAB_SENSOR_ATHER);
                    turnToFragmentStack(R.id.detail_layout, AtherPamarsFragment.class);
                }
                popupWindow.dismiss();
                tabName = setToList.get(position);
            }
        });
    }

    private void handChannel()
    {
        sensorTextView.setText("信道设置");
        sensorLayout.setVisibility(View.VISIBLE);
        setListView.setVisibility(View.GONE);
        setToAdapter = new CustomToAdapter(getApplicationContext(),
                setToChannelList);
        setToListView.setAdapter(setToAdapter);
        setToListView.setOnItemClickListener(new AdapterView.OnItemClickListener()
        {

            @Override
            public void onItemClick(AdapterView<?> parent,
                                    View view, int position, long id)
            {
                if (position == UiEventEntry.NOTIFY_CHANNEL_SELECT)
                {
                    turnToFragmentStack(R.id.detail_layout, ChannelSelectFragment.class);
                    setCurrentSel(UiEventEntry.TAB_CHANNEL_SELECT);
                }
                else if (position == UiEventEntry.NOTIFY_CHANNEL_GPRS)
                {
                    setCurrentSel(UiEventEntry.TAB_CHANNEL_GPRS);
                    turnToFragmentStack(R.id.detail_layout, ChannelGPRSFragment.class);
                }
                else if (position == UiEventEntry.NOTIFY_CHANNEL_GMS)
                {
                    setCurrentSel(UiEventEntry.TAB_CHANNEL_GMS);
                    turnToFragmentStack(R.id.detail_layout, ChannelGMSFragment.class);
                }
                else if (position == UiEventEntry.NOTIFY_CHANNEL_BEI)
                {
                    turnToFragmentStack(R.id.detail_layout, ChannelBEIFragment.class);
                    setCurrentSel(UiEventEntry.TAB_CHANNEL_BEI);
                }
                popupWindow.dismiss();
                tabName = setToChannelList.get(position);
            }
        });
    }

    private void handRTU(final ListView setListView)
    {
        if (setListView != null)
        {
            setListView.setOnItemClickListener(new AdapterView.OnItemClickListener()
            {

                @Override
                public void onItemClick(AdapterView<?> parent, View view,
                                        int position, long id)
                {

                    if (currentTab == UiEventEntry.TAB_SEARCH)
                    {
                        tabName = searchList.get(position);

                        if (position == UiEventEntry.NOTIFY_SEARCH_RDDATA)
                        {
                            setCurrentSel(UiEventEntry.TAB_SEARCH_RADATA);
                            turnToFragmentStack(R.id.detail_layout, SearchDataFragment.class);
                        }
                        else
                        {
                            Bundle bundle = new Bundle();
                            if (gprsFragment == null)
                            {
                                gprsFragment = (SearchFragment) FgManager.getFragment(SearchFragment.class);
                            }
                            if (gprsFragment != null && gprsFragment.isVisible())
                            {
                                gprsFragment.stopUpdate();
                            }

                            if (position == UiEventEntry.NOTIFY_SEARCH_BASIC)
                            {
                                setCurrentSel(UiEventEntry.TAB_SEARCH_BASIC);
                                bundle.putInt(UiEventEntry.CURRENT_SEARCH, UiEventEntry.TAB_SEARCH_BASIC);
                            }
                            else if (position == UiEventEntry.NOTIFY_SEARCH_GPRS)
                            {
                                setCurrentSel(UiEventEntry.TAB_SEARCH_GPRS);
                                bundle.putInt(UiEventEntry.CURRENT_SEARCH, UiEventEntry.TAB_SEARCH_GPRS);
                            }
                            else if (position == UiEventEntry.NOTIFY_SEARCH_CAMERA)
                            {
                                bundle.putInt(UiEventEntry.CURRENT_SEARCH, UiEventEntry.TAB_SEARCH_CAMERA);
                                setCurrentSel(UiEventEntry.TAB_SEARCH_CAMERA);
                            }
                            else if (position == UiEventEntry.NOTIFY_SEARCH_SENSOR)
                            {
                                bundle.putInt(UiEventEntry.CURRENT_SEARCH, UiEventEntry.TAB_SEARCH_SENSOR);
                                setCurrentSel(UiEventEntry.TAB_SEARCH_SENSOR);
                            }
                            else if (position == UiEventEntry.NOTIFY_SEARCH_READ_IMAGE)
                            {
                                bundle.putInt(UiEventEntry.CURRENT_SEARCH, UiEventEntry.TAB_SEARCH_READ_IMAGE);
                                setCurrentSel(UiEventEntry.TAB_SEARCH_READ_IMAGE);
                            }
                            updateRight();
                            turnToFragmentStack(R.id.detail_layout, SearchFragment.class, bundle);
                        }

                        setTextView.setText(tabName);
                        popupWindow.dismiss();
                    }
                    else
                    {
                        tabName = setList.get(position);
                        if (parent.getAdapter() instanceof CustomAdapter)
                        {
                            setTitleRightVisible(View.VISIBLE);
                            if (sensorLayout.getVisibility() == View.GONE && position == 4)
                            {//传感器设置
                                handSensor();
                            }
                            else if ((sensorLayout.getVisibility() == View.GONE && position == 3) && (currentType == UiEventEntry.WRU_2800 || currentType == UiEventEntry.WRU_2100))
                            {//信道设置
                                handChannel();
                            }
                            else
                            {
                                setTitleRight(getString(R.string.update));
                                if (position == UiEventEntry.NOTIFY_SYSTEM_PAMARS)
                                {
                                    setCurrentSel(UiEventEntry.TAB_SETTING_SYS);
                                    turnToFragmentStack(R.id.detail_layout, SystemPamarsFragment.class);
                                }
                                else if (position == UiEventEntry.NOTIFY_COLLECT)
                                {
                                    turnToFragmentStack(R.id.detail_layout, CollectFragment.class);
                                    setCurrentSel(UiEventEntry.TAB_SETTING_COLLECT);
                                }
                                else if (position == UiEventEntry.NOTIFY_COMM_PAMARS)
                                {
                                    turnToFragmentStack(R.id.detail_layout, CommParamsFragment.class);
                                    setCurrentSel(UiEventEntry.TAB_SETTING_COMM);
                                }
                                else if (position == UiEventEntry.NOTIFY_CHANNEL_PAMARS)
                                {
                                    Bundle bundle = new Bundle();
                                    bundle.putInt(UiEventEntry.CURRENT_RTU_NAME, currentType);

                                    setCurrentSel(UiEventEntry.TAB_SETTING_CHANNEL);
                                    turnToFragmentStack(R.id.detail_layout, ChannelFragment.class, bundle);
                                }
                                else if (position == UiEventEntry.NOTIFY_AD_PAMARS)
                                {
                                    setCurrentSel(UiEventEntry.TAB_SETTING_AD);
                                    turnToFragmentStack(R.id.detail_layout, ADFragment.class);
                                }
                                popupWindow.dismiss();
                            }
                        }
                        setTextView.setText(tabName);
                    }

                }
            });
        }
    }

    @Override
    public boolean onMenuItemClick(MenuItem item)
    {
        return false;
    }

    @Override
    public void onDismiss()
    {
        iconImageView.setImageResource(R.mipmap.icon_default);
    }

    @Override
    public void didReceivedNotification(int id, Object... args)
    {
        if (id == UiEventEntry.READ_RESULT_OK)
        {
            String result = "";
            if (args[1] != null)
            {
                result = (String) args[1];
            }
            if (!TextUtils.isEmpty(result))
            {
                if (result.equals(ConfigParams.ResetUnit) || result.equals(ConfigParams.RESETALL) || result.equals(ConfigParams.RESETUNIT))
                {
                    ToastUtil.showToastLong("设备正在重启，稍后请重新连接Wifi！");
                }
                else
                {
                    ToastUtil.showToastLong("设置成功！");
                }
            }

        }
        else if (id == UiEventEntry.CONNCT_AGAIN || id == UiEventEntry.CONNCT_FAIL)
        {
            setTitleRight(getString(R.string.re_connect));
            if (gprsFragment != null && gprsFragment.isVisible())
            {
                gprsFragment.stopUpdate();
            }
        }
        else if (id == UiEventEntry.CONNCT_OK)
        {
            updateRight();
        }
        else if (id == UiEventEntry.READ_RESULT_ERROR)
        {
            ToastUtil.showToastLong("设置错误！");
        }
    }

    private void updateRight()
    {
        setTitleRightVisible(View.VISIBLE);
        if (currentSel == UiEventEntry.TAB_SEARCH_GPRS)
        {
            setTitleRight(getString(R.string.comm_test));

        }
        else if (currentSel == UiEventEntry.TAB_SEARCH_CAMERA)
        {
            setTitleRight(getString(R.string.send_img));
        }
        else if (currentSel == UiEventEntry.TAB_GROUND_WATER_AD)
        {
            setTitleRight(getString(R.string.collect_ad_lv));
        }
        else if (currentSel == UiEventEntry.TAB_SEARCH_READ_IMAGE)
        {
            setTitleRight(getString(R.string.read_image));
        }
        else if (currentSel == UiEventEntry.TAB_SEARCH_RADATA)
        {
            setTitleRight("接收历史数据");
            setTitleRightVisible(View.GONE);
        }
        else
        {
            if (SocketUtil.getSocketUtil().isConnected())
            {
                setTitleRight(getString(R.string.update));
            }
            else
            {
                setTitleRight(getString(R.string.re_connect));
            }
        }
    }
}
